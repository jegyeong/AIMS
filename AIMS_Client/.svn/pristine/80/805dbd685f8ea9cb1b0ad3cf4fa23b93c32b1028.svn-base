package kr.or.ddit.controller.notice;

import java.io.File;
import java.net.URL;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.web.HTMLEditor;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.stage.Stage;
import javafx.util.Callback;

public class AnswerController {

	private ObservableList<File> fileData;
	
    @FXML
    private ResourceBundle resources;

    @FXML
    private URL location;

    @FXML
    private TextField tf_Title;

    @FXML
    private ComboBox<?> cb_category;

    @FXML
    private HTMLEditor html_content;

    @FXML
    private Button btnFileAdd;
    
    @FXML
    private Button btnFileDelete;

    @FXML
    private ListView<File> lv_File;

    @FXML
    private Button btnAdd;

    @FXML
    void OnClickedBtnFileAdd(ActionEvent event) {
    	Stage stage = (Stage)btnAdd.getScene().getWindow();
    	FileChooser fileChooser = new FileChooser();
		
		//화면에 보여줄 파일 종류를 결정하기
		fileChooser.getExtensionFilters().addAll(
		new ExtensionFilter("All file","*.*")
		);
		
		//창이 열였을 떄 보여줄 폴더(디렉토리) 설정
		File showDir = new File("d:/D_other/");
		fileChooser.setInitialDirectory(showDir);
		
		//'열기 창'을 보여주고 사용자가 선택한 파일 정보를 반환한다. 
		File selectedFile = fileChooser.showOpenDialog(stage);
		fileData = FXCollections.observableArrayList(selectedFile);
		lv_File.getItems().addAll(fileData);
//		if(selectedFile!=null) {
//			//이 부분에서 실제 선택한 파일의 내용을 읽어오는 작업을 기술한다.
//			System.out.println("선택한 파일 정보 : "+selectedFile.getPath());					
//		}
    }

    @FXML
    void onClickedBtnAdd(ActionEvent event) {
    	
    	
    	
    }
    
    @FXML
    void OnClickedBtnFileDelete(ActionEvent event) {
    	if(lv_File.getSelectionModel().getSelectedItem() == null) {
    		return;
    	}
    	
    	lv_File.getItems().remove(lv_File.getSelectionModel().getSelectedItem());
    	
    }


    @FXML
    void initialize() {
    	lv_File.setCellFactory(new Callback<ListView<File>, ListCell<File>>() {
			@Override
			public ListCell<File> call(ListView<File> param) {
				return new ListCell<File>() {
					@Override
					protected void updateItem(File item, boolean empty) {
						super.updateItem(item, empty);
						if(!empty) {
							setText(item.getName());
						}
					}
				};
			}
		});

    }
}
